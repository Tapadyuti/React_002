{"ast":null,"code":"import _classCallCheck from\"E:/Practise/ReactMyapp/React_002/React_002/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"E:/Practise/ReactMyapp/React_002/React_002/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"E:/Practise/ReactMyapp/React_002/React_002/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"E:/Practise/ReactMyapp/React_002/React_002/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{Component}from'react';var Counter=/*#__PURE__*/function(_Component){_inherits(Counter,_Component);var _super=_createSuper(Counter);function Counter(props){var _this;_classCallCheck(this,Counter);_this=_super.call(this,props);_this.state={count:0};return _this;}_createClass(Counter,[{key:\"increment\",value:function increment(){// this.state.count = this.state.count +1; // on changing value directly whithout setState the value changes in console but wont change in UI\n/* // this commented to check increment5\r\n        this.setState({\r\n            count: this.state.count +1\r\n        }, () =>{console.log(\"count: \"+this.state.count)})\r\n         */ //The setState have 2 paramenter one is state and another is call back function which executes after setState 1st paramenter is completed\n// Whenever we have to check or execute after the setState is used then check or process in 2nd/callBack function not just bellow.\nthis.setState(function(prevState,props){return{// setting answer with previous state gives proper value.\ncount:prevState.count+(props.addValue?Number(props.addValue):1)};});console.log(\"count: \"+this.state.count);}},{key:\"incrementFive\",value:function incrementFive(){this.increment();this.increment();this.increment();this.increment();this.increment();}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Count : \",this.state.count]}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.increment();},children:\"Increment By 1\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.incrementFive();},children:\"Increment By 5\"})]});}}]);return Counter;}(Component);export default Counter;","map":{"version":3,"sources":["E:/Practise/ReactMyapp/React_002/React_002/src/component/Counter.js"],"names":["React","Component","Counter","props","state","count","setState","prevState","addValue","Number","console","log","increment","incrementFive"],"mappings":"4jBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,GAEMC,CAAAA,O,kGACF,iBAAYC,KAAZ,CAAmB,yCACf,uBAAMA,KAAN,EAEA,MAAKC,KAAL,CAAa,CACRC,KAAK,CAAE,CADC,CAAb,CAHe,aAMlB,C,iEAEU,CACP;AACA;AACR;AACA;AACA;AACA,WANe,CAOP;AACA;AAGA,KAAKC,QAAL,CAAc,SAACC,SAAD,CAAYJ,KAAZ,QAAuB,CAAG;AACpCE,KAAK,CAAEE,SAAS,CAACF,KAAV,EAAmBF,KAAK,CAACK,QAAN,CAAeC,MAAM,CAACN,KAAK,CAACK,QAAP,CAArB,CAAsC,CAAzD,CAD0B,CAAvB,EAAd,EAGAE,OAAO,CAACC,GAAR,CAAY,UAAU,KAAKP,KAAL,CAAWC,KAAjC,EAEH,C,qDACc,CACX,KAAKO,SAAL,GACA,KAAKA,SAAL,GACA,KAAKA,SAAL,GACA,KAAKA,SAAL,GACA,KAAKA,SAAL,GACH,C,uCAEQ,iBACL,mBACI,oCACI,kCAAc,KAAKR,KAAL,CAAWC,KAAzB,GADJ,cAEI,eAAQ,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACO,SAAL,EAAN,EAAjB,4BAFJ,cAGI,eAAQ,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACC,aAAL,EAAN,EAAjB,4BAHJ,GADJ,CAOH,C,qBA1CiBZ,S,EA6CtB,cAAeC,CAAAA,OAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             count: 0\r\n        }\r\n    }\r\n\r\n    increment(){\r\n        // this.state.count = this.state.count +1; // on changing value directly whithout setState the value changes in console but wont change in UI\r\n        /* // this commented to check increment5\r\n        this.setState({\r\n            count: this.state.count +1\r\n        }, () =>{console.log(\"count: \"+this.state.count)})\r\n         */\r\n        //The setState have 2 paramenter one is state and another is call back function which executes after setState 1st paramenter is completed\r\n        // Whenever we have to check or execute after the setState is used then check or process in 2nd/callBack function not just bellow.\r\n        \r\n\r\n        this.setState((prevState, props) => ({  // setting answer with previous state gives proper value.\r\n            count: prevState.count + (props.addValue?Number(props.addValue):1)\r\n        }))\r\n        console.log(\"count: \"+this.state.count);\r\n\r\n    }\r\n    incrementFive(){\r\n        this.increment();\r\n        this.increment();\r\n        this.increment();\r\n        this.increment();\r\n        this.increment();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Count : {this.state.count}</div>\r\n                <button onClick={() => this.increment()}>Increment By 1</button> \r\n                <button onClick={() => this.incrementFive()}>Increment By 5</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n"]},"metadata":{},"sourceType":"module"}